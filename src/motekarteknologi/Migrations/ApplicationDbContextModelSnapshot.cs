// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using motekarteknologi.Data;
using System;

namespace motekarteknologi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.ActivityType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("NumberofDays");

                    b.Property<Guid?>("RecomendedNextActivityID");

                    b.HasKey("ID");

                    b.HasIndex("RecomendedNextActivityID");

                    b.ToTable("ActivityType");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.Customer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<string>("ContactName")
                        .HasMaxLength(200);

                    b.Property<string>("Country")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<Guid?>("CustomerTypeID");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<string>("JobPosition")
                        .HasMaxLength(100);

                    b.Property<string>("Mobile")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<string>("State")
                        .HasMaxLength(100);

                    b.Property<string>("Street")
                        .HasMaxLength(100);

                    b.Property<string>("Street2")
                        .HasMaxLength(100);

                    b.Property<string>("Website")
                        .HasMaxLength(100);

                    b.Property<string>("ZIP")
                        .HasMaxLength(20);

                    b.HasKey("ID");

                    b.HasIndex("CustomerTypeID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.CustomerActivity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ActivityTypeID");

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<Guid?>("CustomerID");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<DateTime>("From");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("To");

                    b.HasKey("ID");

                    b.HasIndex("ActivityTypeID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerActivity");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.CustomerAdditionalContact", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<Guid?>("CustomerID");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerAdditionalContact");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.CustomerNote", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<Guid?>("CustomerID");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerNote");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.CustomerType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("CustomerType");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.Lead", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<string>("ContactName")
                        .HasMaxLength(200);

                    b.Property<string>("Country")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsQualified");

                    b.Property<string>("JobPosition")
                        .HasMaxLength(100);

                    b.Property<Guid?>("LeadTypeID");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<int>("Priority");

                    b.Property<Guid?>("SalesChannelID");

                    b.Property<string>("SalesPersonId");

                    b.Property<string>("State")
                        .HasMaxLength(100);

                    b.Property<string>("Street")
                        .HasMaxLength(100);

                    b.Property<string>("Street2")
                        .HasMaxLength(100);

                    b.Property<string>("Website")
                        .HasMaxLength(100);

                    b.Property<string>("ZIP")
                        .HasMaxLength(20);

                    b.HasKey("ID");

                    b.HasIndex("LeadTypeID");

                    b.HasIndex("SalesChannelID");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("Lead");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.LeadActivity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ActivityTypeID");

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<DateTime>("From");

                    b.Property<bool>("IsActive");

                    b.Property<Guid?>("LeadID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("To");

                    b.HasKey("ID");

                    b.HasIndex("ActivityTypeID");

                    b.HasIndex("LeadID");

                    b.ToTable("LeadActivity");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.LeadAdditionalContact", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactName")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<string>("JobPosition")
                        .HasMaxLength(100);

                    b.Property<Guid?>("LeadID");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("LeadID");

                    b.ToTable("LeadAdditionalContact");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.LeadNote", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<Guid?>("LeadID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("LeadID");

                    b.ToTable("LeadNote");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.LeadType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("LeadType");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.LostReason", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("LostReason");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.Opportunity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActualClosing");

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<Guid?>("CustomerID");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<DateTime>("ExpectedClosing");

                    b.Property<decimal>("ExpectedRevenue")
                        .HasColumnType("money");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsLost");

                    b.Property<bool>("IsWon");

                    b.Property<Guid?>("LeadID");

                    b.Property<Guid?>("LostReasonID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid?>("PipelineStageID");

                    b.Property<int>("Priority");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("LeadID");

                    b.HasIndex("LostReasonID");

                    b.HasIndex("PipelineStageID");

                    b.ToTable("Opportunity");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.OpportunityActivity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ActivityTypeID");

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<DateTime>("From");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid?>("OpportunityID");

                    b.Property<DateTime>("To");

                    b.HasKey("ID");

                    b.HasIndex("ActivityTypeID");

                    b.HasIndex("OpportunityID");

                    b.ToTable("OpportunityActivity");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.PipelineStage", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("PipelineStage");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.SalesChannel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChannelLeaderId");

                    b.Property<DateTime>("CreatedDateUtc");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("ChannelLeaderId");

                    b.ToTable("SalesChannel");
                });

            modelBuilder.Entity("motekarteknologi.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<Guid?>("SalesChannelID");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SalesChannelID");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("motekarteknologi.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("motekarteknologi.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("motekarteknologi.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("motekarteknologi.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.ActivityType", b =>
                {
                    b.HasOne("motekarteknologi.Areas.crm.Models.ActivityType", "RecomendedNextActivity")
                        .WithMany()
                        .HasForeignKey("RecomendedNextActivityID");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.Customer", b =>
                {
                    b.HasOne("motekarteknologi.Areas.crm.Models.CustomerType", "CustomerType")
                        .WithMany()
                        .HasForeignKey("CustomerTypeID");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.CustomerActivity", b =>
                {
                    b.HasOne("motekarteknologi.Areas.crm.Models.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeID");

                    b.HasOne("motekarteknologi.Areas.crm.Models.Customer", "Customer")
                        .WithMany("LineActivity")
                        .HasForeignKey("CustomerID");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.CustomerAdditionalContact", b =>
                {
                    b.HasOne("motekarteknologi.Areas.crm.Models.Customer", "Customer")
                        .WithMany("LineAdditionalContact")
                        .HasForeignKey("CustomerID");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.CustomerNote", b =>
                {
                    b.HasOne("motekarteknologi.Areas.crm.Models.Customer")
                        .WithMany("LineNote")
                        .HasForeignKey("CustomerID");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.Lead", b =>
                {
                    b.HasOne("motekarteknologi.Areas.crm.Models.LeadType", "LeadType")
                        .WithMany()
                        .HasForeignKey("LeadTypeID");

                    b.HasOne("motekarteknologi.Areas.crm.Models.SalesChannel", "SalesChannel")
                        .WithMany()
                        .HasForeignKey("SalesChannelID");

                    b.HasOne("motekarteknologi.Models.ApplicationUser", "SalesPerson")
                        .WithMany()
                        .HasForeignKey("SalesPersonId");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.LeadActivity", b =>
                {
                    b.HasOne("motekarteknologi.Areas.crm.Models.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeID");

                    b.HasOne("motekarteknologi.Areas.crm.Models.Lead", "Lead")
                        .WithMany("LineActivity")
                        .HasForeignKey("LeadID");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.LeadAdditionalContact", b =>
                {
                    b.HasOne("motekarteknologi.Areas.crm.Models.Lead", "Lead")
                        .WithMany("LineAdditionalContact")
                        .HasForeignKey("LeadID");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.LeadNote", b =>
                {
                    b.HasOne("motekarteknologi.Areas.crm.Models.Lead", "Lead")
                        .WithMany("LineNote")
                        .HasForeignKey("LeadID");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.Opportunity", b =>
                {
                    b.HasOne("motekarteknologi.Areas.crm.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID");

                    b.HasOne("motekarteknologi.Areas.crm.Models.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadID");

                    b.HasOne("motekarteknologi.Areas.crm.Models.LostReason", "LostReason")
                        .WithMany()
                        .HasForeignKey("LostReasonID");

                    b.HasOne("motekarteknologi.Areas.crm.Models.PipelineStage", "PipelineStage")
                        .WithMany()
                        .HasForeignKey("PipelineStageID");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.OpportunityActivity", b =>
                {
                    b.HasOne("motekarteknologi.Areas.crm.Models.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeID");

                    b.HasOne("motekarteknologi.Areas.crm.Models.Opportunity", "Opportunity")
                        .WithMany("LineActivity")
                        .HasForeignKey("OpportunityID");
                });

            modelBuilder.Entity("motekarteknologi.Areas.crm.Models.SalesChannel", b =>
                {
                    b.HasOne("motekarteknologi.Models.ApplicationUser", "ChannelLeader")
                        .WithMany()
                        .HasForeignKey("ChannelLeaderId");
                });

            modelBuilder.Entity("motekarteknologi.Models.ApplicationUser", b =>
                {
                    b.HasOne("motekarteknologi.Areas.crm.Models.SalesChannel")
                        .WithMany("TeamMembers")
                        .HasForeignKey("SalesChannelID");
                });
#pragma warning restore 612, 618
        }
    }
}
